// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

dependencies {
    implementation heartCoordinates
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jme3Version // for Jaime

    // select one version of LWJGL:
    //runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jme3Version  // for LWJGL 2.x
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version // for LWJGL 3.x

    // AcorusExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version

    //implementation 'com.github.stephengold:Acorus:' + acorusVersion
    implementation project(':AcorusLibrary')
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// tasks to run the example apps:

tasks.register('TestAbstractDemo', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestAbstractDemo'
}
tasks.register('HelloAcorus', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloAcorus'
}
tasks.register('HelloBind', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloBind'
}
tasks.register('HelloCoas', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloCoas'
}
tasks.register('HelloCombo', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloCombo'
}
tasks.register('TestCursors', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestCursors'
}

tasks.register('TestDsEdit', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestDsEdit'
}
tasks.register('TestDsEditDeleteSettings', JavaExec) {
    args '--deleteOnly'
    mainClass = 'jme3utilities.ui.test.TestDsEdit'
}
tasks.register('TestDsEditResetSettings', JavaExec) {
    args '--resetOnly'
    mainClass = 'jme3utilities.ui.test.TestDsEdit'
}

tasks.register('HelloSimpleApplication', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloSimpleApplication'
}
tasks.register('TestHeadless', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestHeadless'
}
tasks.register('TestHotkeys', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestHotkeys'
}
tasks.register('HelloToggleHelp', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloToggleHelp'
}
tasks.register('HelloSandbox', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloSandbox'
}
tasks.register('HelloSignals', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloSignals'
}
tasks.register('TestToggleFly', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestToggleFly'
}
tasks.register('TestTwoModes', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestTwoModes'
}
